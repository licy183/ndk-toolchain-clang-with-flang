From 041739666e25237193307daa8c1083f45bbd6cd6 Mon Sep 17 00:00:00 2001
From: Chris Wailes <chriswailes@google.com>
Date: Tue, 06 Aug 2024 13:06:15 -0700
Subject: [PATCH] Update script for building a prebuilt compatible with the Rust toolchain

This CL modifies do_build.py script to:
1. Copy the FileCheck utility into the final package
2. Copy the libzstd.a library into the final package
3. Add a flag to skip pruning of "unnecessary" binaries

Test: ./build.py --no-prune-binaries
Test: cd ~/projects/android/main-plus-rust/toolchain/android_rust
Test: ./tools/build.py --llvm-linkage static --unified-prebuilt ../../../llvm-toolchain/out/install/linux-x86/clang-dev
Change-Id: I524b9034a77f09b697dd381a6b85f7dd4805e9a4
---

diff --git a/do_build.py b/do_build.py
index bb9a63a..0ab77b8 100755
--- a/toolchain/llvm_android/do_build.py
+++ b/toolchain/llvm_android/do_build.py
@@ -374,7 +374,7 @@

 def package_toolchain(toolchain_builder: LLVMBuilder,
                       necessary_bin_files: Optional[Set[str]]=None,
-                      strip=True, with_runtimes=True, create_tar=True, llvm_next=False):
+                      strip=True, with_runtimes=True, create_tar=True, llvm_next=False, dev_package=False):
     build_dir = toolchain_builder.install_dir
     host_config = toolchain_builder.config_list[0]
     host = host_config.target_os
@@ -493,7 +493,8 @@
     for binary in bin_dir.iterdir():
         if binary.is_file():
             if binary.name not in necessary_bin_files:
-                binary.unlink()
+                if not dev_package:
+                    binary.unlink()
             elif binary.is_symlink():
                 continue
             elif strip and binary.name not in script_bins:
@@ -511,6 +512,11 @@
         if not (bin_dir / necessary_bin_file).is_file():
             raise RuntimeError(f'Did not find {necessary_bin_file} in {bin_dir}')

+    if host.is_linux and dev_package:
+        # Copy FileCheck into the install directory.  This is needed to build the
+        # Rust toolchain.
+        shutil.copy2(toolchain_builder.output_dir / 'bin' / 'FileCheck', bin_dir)
+
     necessary_lib_files = set()
     if with_runtimes:
         if not (host.is_windows and win_sdk.is_enabled()):
@@ -548,7 +554,8 @@
                                                                      is_darwin_lib=True)

     # Remove unnecessary static libraries.
-    remove_static_libraries(lib_dir, necessary_lib_files)
+    if not dev_package:
+        remove_static_libraries(lib_dir, necessary_lib_files)

     if host.is_linux:
         install_wrappers(install_dir, llvm_next)
@@ -585,6 +592,12 @@
         else:
             verify_file_exists(lib_dir, necessary_lib_file)

+    # Copy in the libzstd.a library.  This is needed to compile the Rust
+    # toolchain.
+    if dev_package and toolchain_builder.libzstd is not None:
+        for lib in toolchain_builder.libzstd.link_libraries:
+            shutil.copy2(lib, lib_dir)
+
     # Next, we copy over stdatomic.h and bits/stdatomic.h from bionic.
     libc_include_path = paths.ANDROID_DIR / 'bionic' / 'libc' / 'include'
     header_path = lib_dir / 'clang' / version.major_version() / 'include'
@@ -872,8 +885,7 @@
     bootstrap_group.add_argument(
         '--bootstrap-use',
         default='',
-        help='Use the given bootstrap compiler.'
-    )
+        help='Use the given bootstrap compiler.')
     bootstrap_group.add_argument(
         '--bootstrap-use-prebuilt',
         action='store_true',
@@ -919,13 +931,16 @@
         "--git_am",
         action="store_true",
         default=False,
-        help="If set, use 'git am' to patch instead of GNU 'patch'. ",
-    )
+        help="If set, use 'git am' to patch instead of GNU 'patch'. ",)

     parser.add_argument(
         '--windows-sdk',
-        help='Path to a Windows SDK. If set, it will be used instead of MinGW.'
-    )
+        help='Path to a Windows SDK. If set, it will be used instead of MinGW.')
+
+    parser.add_argument(
+        "--dev-package",
+        action="store_true",
+        help="Skip pruning non-allowlisted binaries and install additional files in the final prebuilt archive")

     musl_group = parser.add_mutually_exclusive_group()
     musl_group.add_argument(
@@ -1184,7 +1199,8 @@
             strip=do_strip_host_package,
             with_runtimes=do_runtimes,
             create_tar=args.create_tar,
-            llvm_next=args.build_llvm_next)
+            llvm_next=args.build_llvm_next,
+            dev_package=args.dev_package)

     if do_package and need_windows:
         package_toolchain(
@@ -1192,7 +1208,8 @@
             necessary_bin_files=win_lldb_bins,
             strip=do_strip,
             with_runtimes=do_runtimes,
-            create_tar=args.create_tar)
+            create_tar=args.create_tar,
+            dev_package=args.dev_package)

     if build_errors:
         logger().info(toolchain_errors.combine_toolchain_errors(build_errors))
